/**
 * Copyright (c) 2016 The BlockAPI authors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
package com.tree_bit.blockapi.nbt;

import com.tree_bit.blockapi.Settings;
import com.tree_bit.blockapi.nbt.NBTCompound.Tags;
import com.tree_bit.blockapi.nbt.NBTList.Recursive;
import com.tree_bit.blockapi.nbt.tags.CompoundTag;
import com.tree_bit.blockapi.nbt.tags.ListTag;
import com.tree_bit.blockapi.nbt.tags.Tag;
import com.tree_bit.blockapi.nbt.tags.ValueType;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
import org.springframework.core.annotation.AnnotationUtils;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;
import java.util.Optional;
import java.util.SortedMap;
import java.util.TreeMap;
import java.util.function.Function;
import java.util.stream.Collectors;

/**
 * Annotation processor for NBT annotations.
 */
final class AnnotationProcessor {

    private AnnotationProcessor() {}

    /**
     * Create a list tag by processing the NBTList annotation on the methods of
     * the given object.
     *
     * @param name Name of the list tag
     * @param clazz Class of the inner tags
     * @param obj Object to process
     * @return
     */
    static <T extends Tag<?>> ListTag<T> getList(final String name, final NBTListData<T> obj) {

        if (obj.tagClass() == null) {
            throw new IllegalStateException("Tag class of " + obj.getClass() + " is not set.");
        }

        final ListBuilder<T> builder = NBT.List(name, obj.tagClass());
        final SortedMap<Integer, T> tags = new TreeMap<>();

        for (final Method m : obj.getClass().getMethods()) {

            @Nullable
            final NBTList nbtList = AnnotationUtils.findAnnotation(m, NBTList.class);

            if (nbtList == null) {
                continue;
            }

            // --------------Skip if version doesn't match
            {
                final boolean match = checkVersion(nbtList.version());
                if (!match) {
                    continue;
                }
            }
            // --------------------------------------------

            final int order = nbtList.order();
            final String key = nbtList.key();
            final Transformation trans = nbtList.transformation();

            // Check if tag should be generated by processing the class of
            // this
            // object:
            try {
                if (nbtList.recursive() == Recursive.isNBTList) {
                    NBTListData<?> value;
                    m.setAccessible(true);
                    // TODO: Identity x->x? Or should this be the
                    // converters?
                    value = (NBTListData<?>) transformValue(m.invoke(obj), trans, x -> x);

                    @SuppressWarnings("unchecked")
                    // Has to work or the data structure is invalid
                    final T tag = (T) getList(key, value);
                    builder.add(tag);
                    continue;
                } else if (nbtList.recursive() == Recursive.isNBTCompound) {
                    NBTCompoundData value;
                    m.setAccessible(true);
                    // TODO: Identity x->x? Or should this be the
                    // converters?
                    value = (NBTCompoundData) transformValue(m.invoke(obj), trans, x -> x);

                    @SuppressWarnings("unchecked")
                    // Has to work or the data structure is invalid
                    final T tag = (T) getCompound(key, value);
                    builder.add(tag);
                    continue;
                }
            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | SecurityException e) {
                throw new IllegalStateException(e);
            } catch (final DoNotAddException e) {
                // Do not add the tag and continue
                continue;
            }

            if (obj.tagClass().equals(Tag.class)) {
                throw new IllegalStateException("Illegal definition: Tag class mustn't be the interface 'Tag.class'");
            }

            final Class<? extends Function<?, ?>>[] converter = nbtList.converter();
            final Class<?> valueType = obj.tagClass().getAnnotation(ValueType.class).value();

            // -----------------------Get of method-----------------------
            Method of;
            try {
                of = obj.tagClass().getMethod("of", String.class, valueType);
            } catch (NoSuchMethodException | SecurityException e) {
                throw new IllegalStateException(e);
            }
            // ------------------------------------------------------------

            try {
                @SuppressWarnings("unchecked")
                final T tag = (T) createTag(m, obj, of, trans, converter, key);

                tags.put(order, tag);
            } catch (final DoNotAddException e) {
                // Do not add the tag and continue
                continue;
            }
        }

        return builder.addAll(tags.values()).build();
    }

    private static boolean checkVersion(final NBTVersion[] nbtVersions) {
        if (nbtVersions.length == 0) {
            return true;
        }
        boolean match = false;
        for (final NBTVersion v : nbtVersions) {
            if ((v.min().compareTo(Settings.getVersion()) <= 0) && (v.max().compareTo(Settings.getVersion()) >= 0)) {
                match = true;
            }
        }
        return match;
    }

    /**
     * Create a compound tag by processing the NBTCompound annotation on the
     * methods of the given object.
     *
     * @param name Name of the compound tag
     * @param obj Object to process
     * @return
     */
    static CompoundTag getCompound(final String name, final NBTCompoundData obj) {
        // Compound Builder
        final CompoundBuilder builder = NBT.Compound(name);

        for (final Method m : obj.getClass().getMethods()) {

            final @Nullable NBTCompound compoundAnnotation = AnnotationUtils.findAnnotation(m, NBTCompound.class);

            if (compoundAnnotation == null) {
                continue;
            }

            // --------------Skip if version doesn't match
            {
                final boolean match = checkVersion(compoundAnnotation.version());
                if (!match) {
                    continue;
                }
            }
            // --------------------------------------------

            final String key = compoundAnnotation.key();
            final Transformation trans = compoundAnnotation.transformation();

            // Check if tag should be generated by processing the class of this
            // object:
            try {
                if (compoundAnnotation.tag() == Tags.isNBTList) {
                    NBTListData<?> value;
                    m.setAccessible(true);
                    // TODO: Identity x->x? Or should this be the converters?
                    value = (NBTListData<?>) transformValue(m.invoke(obj), trans, x -> x);
                    builder.add(getList(key, value));
                    continue;
                } else if (compoundAnnotation.tag() == Tags.isNBTCompound) {
                    NBTCompoundData value;
                    m.setAccessible(true);
                    // TODO: Identity x->x? Or should this be the converters?
                    value = (NBTCompoundData) transformValue(m.invoke(obj), trans, x -> x);
                    builder.add(getCompound(key, value));
                    continue;
                }
            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | SecurityException e) {
                throw new IllegalStateException(e);
            } catch (final DoNotAddException e) {
                // Do not add the tag and continue
                continue;
            }

            final Class<? extends Tag<?>> tagClass = compoundAnnotation.tag().getTagClass();
            if (tagClass.equals(Tag.class)) {
                throw new IllegalStateException("Illegal compound annotation: TagClass mustn't be the interface 'Tag.class'");
            }


            final Class<? extends Function<?, ?>>[] converter = compoundAnnotation.converter();
            final Class<?> valueType = tagClass.getAnnotation(ValueType.class).value();

            // Get of method
            Method of;
            try {
                of = tagClass.getMethod("of", String.class, valueType);
            } catch (NoSuchMethodException | SecurityException e) {
                throw new IllegalStateException(e);
            }

            try {
                builder.add(createTag(m, obj, of, trans, converter, key));
            } catch (final DoNotAddException e) {
                // Do not add the tag and continue
                continue;
            }

        }
        return builder.build();

    }

    private static Tag<?> createTag(final Method m, final Object obj, final Method ofMethod, final Transformation trans,
            final Class<? extends Function<?, ?>>[] converter, final Object... params) throws DoNotAddException {

        try {
            m.setAccessible(true);

            // Get value to put into the tag
            Object value = m.invoke(obj);

            // Transform value
            value = transformValue(value, trans, val -> {
                Object v = val;
                try {
                    // Apply each converter to the value
                    for (final Class<? extends Function<?, ?>> convClass : converter) {
                        @SuppressWarnings("unchecked")
                        final Function<Object, Object> conv = ((Function<Object, Object>) convClass.newInstance());
                        v = conv.apply(v);
                    }
                    return v;
                } catch (InstantiationException | IllegalAccessException e) {
                    throw new IllegalStateException(e);
                }
            });

            final Object[] parameters = new Object[params.length + 1];
            for (int i = 0; i < params.length; i++) {
                parameters[i] = params[i];
            }
            parameters[params.length] = value;

            // Create tag
            final @NonNull Tag<?> tag = (Tag<?>) ofMethod.invoke(null, parameters);
            return tag;

        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | SecurityException e) {
            throw new IllegalStateException(e);
        }
    }

    private static Object transformValue(final Object value, final Transformation trans, final Function<Object, Object> function)
            throws DoNotAddException {
        switch (trans) {
            case NONE:
                return function.apply(value);
            case OPTIONAL:
                @SuppressWarnings("unchecked")
                final Optional<Object> opt = (Optional<Object>) value;
                if (opt.isPresent()) {
                    return function.apply(opt);
                }
                throw new DoNotAddException();
            case LIST:
                @SuppressWarnings("unchecked")
                final List<Object> list = (List<Object>) value;
                return list.stream().map(function).collect(Collectors.toList());
            default:
                throw new RuntimeException("Some case is not implemented!");
        }
    }

    private static class DoNotAddException extends Exception {
        // Empty
    }
}
